name: Publish

on:
  push:
    tags:
    - '*'

jobs:
  push_backend_to_registry:
    name: Publish Backend to GitHub Packages
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v3
      with:
        images: ghcr.io/aposphere/cltp-backend-proxy
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push to GitHub Packages
      uses: docker/build-push-action@v2
      with:
        context: backend
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
  push_frontend_to_registry:
    name: Publish Frontend to GitHub Packages
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v3
      with:
        images: ghcr.io/aposphere/cltp-frontend
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push to GitHub Packages
      uses: docker/build-push-action@v2
      with:
        context: frontend
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Use Node.js
      uses: actions/setup-node@v2.4.0
    - name: Install angular cli
      run: npm i -g @angular/cli
      env:
        CI: true
    - name: Setup angular builder
      run: |
        cd frontend
        npm ci
      env:
        CI: true
    - name: Get version
      id: version
      run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
    - name: Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        # Create a prerelease if "-" is contained in the version
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        release_name: Release ${{ steps.version.outputs.version }}
        tag_name: ${{ github.ref }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Install and Build
      run: |
        cd php
        bash build.sh
      env:
        CI: true
    - name: Attach PHP Build Files
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: php/cltp.zip
        asset_name: cltp-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
    - name: Install and Build "SARSCov2"
      run: |
        cd php
        bash build-SARSCov2.sh
      env:
        CI: true
    - name: Attach PHP Build Files "SARSCov2"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: php/cltp-SARSCov2.zip
        asset_name: cltp-SARSCov2-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
